<?php

  function demo_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {

    if ($hook === 'form_element'
      && array_key_exists('#context', $variables['element'])
      && array_key_exists('#view_id', $variables['element']['#context'])
      && $variables['element']['#context']['#view_id'] == 'events') {
      $suggestions[] = $hook . '__views_list_filters';
    }

    if ($hook === 'fieldset'
      && array_key_exists('#context', $variables['element'])
      && array_key_exists('#view_id', $variables['element']['#context'])
      && $variables['element']['#context']['#view_id'] == 'events') {
      $suggestions[] = $hook . '__views_list_filters';
    }

    if ($hook === 'bef_checkboxes'
      && array_key_exists('#context', $variables['element'])
      && array_key_exists('#view_id', $variables['element']['#context'])
      && $variables['element']['#context']['#view_id'] == 'events') {
      $suggestions[] = $hook . '__views_list_filters';
    }
  }

  use Drupal\Core\Form\FormStateInterface;
  use Drupal\views\ViewExecutable;
  
  /**
   * @param $form
   * @param FormStateInterface $form_state
   * @return void
   */
  function demo_common_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
    /** @var ViewExecutable $view */
    $view = $form_state->getStorage('view');

    if ($view['view']->id() == 'events' && $view['view']->current_display == 'page_1' && isset($form['title'])) {
      $form['title']['#attributes']['data-bef-auto-submit-exclude'] = '';
    }
  }

  function demo_preprocess_views_view(&$variables){
    $filter_keyword = [];

    $keyword = \Drupal::request()->query->get('title');
    $keyword_split = explode(",", $keyword);

    $vocals = [
      'field_topic_target_id' => 'topic', 
      'field_region_target_id' => 'region'
    ];

    if ($keyword) {
      foreach ($keyword_split as $key => $vocal) {
        $filter_keyword[] = [
          'id' => 'keyword',
          'keyword' => $vocal,
          'nohidden' => TRUE,
        ];
      }
    }

    foreach ($vocals as $key => $vocal) {
      $vocabulary = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vocal);
      $term_array = \Drupal::request()->query->get($key);
      
      if ($term_array) {
        foreach ($vocabulary as $key => $value) {
          $filter_keyword[] = [
            'id' => $value->tid,
            'keyword' => $value->name,
            'nohidden' => array_search($value->tid, $term_array) ? TRUE : FALSE,
          ];
        }
      }
    }

    // dpm($filter_keyword);

    $variables['filter_keyword'] = $filter_keyword;
  }
